#include <vector>
#include <iostream>
using namespace std;

template < class T >
BXVector<T>::BXVector( int size,      // number of objects per BX
		    int bxFirst,   // first BX stored
		    int bxLast )  // last BX stored
  :
    bxFirst_(bxFirst),
    bxLast_(bxLast),
    data_(std::vector<T>(size * (bxLast-bxFirst+1)))
{
   itrs_.clear();
   for (int i=0; i<=(bxLast - bxFirst); i++){ 
      itrs_.push_back(i*size);
   }
}

// copy ctor
template < class T >
BXVector<T>::BXVector ( const BXVector& vector )
{
   
}

// dtor
template < class T >
BXVector<T>::~BXVector()
{

}

// assignment operator (pass by value for exception safety)
//template < class T >
//BXVector<T> BXVector<T>::operator=( BXVector vector )
//{
//
//}


// set BX range
template < class T >
void BXVector<T>::setBXRange( int bxFirst, int bxLast )
{
  int bxF = bxFirst_;
  int bxL = bxLast_;
  if(bxFirst<bxFirst_){
     for(int i=0;i<bxF-bxFirst;i++){
        itrs_.insert(itrs_.begin(),itrs_[0]);
     }
  }
  if(bxFirst>bxFirst_){
     for(int i=0;i<bxFirst-bxF;i++){
        deleteBX(bxF+i);
     }
  }
  if(bxLast>bxLast_){
     for(int i=0;i<bxLast-bxL;i++){
	addBX();
     }
  }
  if(bxLast<bxLast_){
     for(int i=0;i<bxL-bxLast;i++){
	deleteBX(bxLast-i);
     }
  }
  bxFirst_ = bxFirst;
  bxLast_ = bxLast;
}

// add a BX
template < class T >
void BXVector<T>::addBX()
{
  itrs_.push_back(data_.size());
  bxLast_ = bxLast_ + 1;
}

// delete a BX
template < class T >
void BXVector<T>::deleteBX(int bx)
{
  clearBX(bx);
  itrs_.erase(itrs_.begin() + indexFromBX(bx));
  bxLast_ = bxLast_ - 1;
}

// set size for a given BX
template < class T >
void BXVector<T>::resize( int bx, int max )
{
  int k;
  int s = size(bx);
  if(size(bx) < max){
     for (int i = 0;i<max - s;i++){
        push_back(bx,k);
     }
  }
  else{
     for(int i = 0;i<s - max;i++){
	erase(bx,s-i-1);
     }
  }
}


// set size for all BXs
template < class T >
void BXVector<T>::resizeAll( int size )
{
  for (unsigned i=0; i<itrs_.size(); ++i) {
    resize(i,size);
  }
}

// iterator access by BX
template < class T >
unsigned BXVector<T>::begin( int bx ) const
{
   return itrs_[indexFromBX(bx)];
}

// iterator access by BX
template < class T >
unsigned BXVector<T>::end( int bx ) const
{
   return itrs_[indexFromBX(bx)] + size(indexFromBX(bx));
}

// get the first BX stored
template < class T >
int BXVector<T>::getFirstBX() const
{
  return bxFirst_;
}

// get the last BX stored
template < class T >
int BXVector<T>::getLastBX() const
{
  return bxLast_;
}

// get N objects for a given BX
template < class T >
unsigned BXVector<T>::size( int bx ) const
{
  if(isEmpty(bx)){return 0;}
  if(indexFromBX(bx)==(itrs_.size() -1)){
     return (data_.size() - itrs_[itrs_.size()-1]);
  } 
  else{
     return (itrs_[indexFromBX(bx+1)] - itrs_[indexFromBX(bx)]);
  }
}

// add element with given BX index
template < class T >
void BXVector<T>::push_back( int bx, T object )
{
  data_.insert(data_.begin() +itrs_[indexFromBX(bx)] + size(bx),object);
  for(int k=0; k<itrs_.size();k++){
     if(k >indexFromBX(bx)){
        itrs_[k]++;
     }
  }
 
}

// clear entire BXVector
template < class T >
void BXVector<T>::clear()
{
  data_.clear();
  for(int k=0; k<itrs_.size();k++){
     itrs_[k]=0;
  }
}

// insert data in location i of bx
template < class T >
void BXVector<T>::insert(int bx, int i,T object)
{
  if(i >= size(bx)){	
     cout<<"ERROR: bx "<<bx<<" is only "<<size(bx)<<" long"<<endl;
  }
  else{
     data_.insert(data_.begin() + itrs_[indexFromBX(bx)] + i,object);
  
     for(int k=0; k<itrs_.size();k++){
      	if(k >indexFromBX(bx)){
           itrs_[k]++;
     	}
     }
  }
}

// erase data in location i of bx
template < class T >
void BXVector<T>::erase(int bx, int i)
{
  if(i >= size(bx)){	
     cout<<"ERROR: bx "<<bx<<" is only "<<size(bx)<<" long"<<endl;
  }
  else{
     data_.erase(data_.begin() + itrs_[indexFromBX(bx)]+i);
     for(int k=0; k<itrs_.size();k++){
        if(k >indexFromBX(bx)){
	   itrs_[k]--;
	}
     }
  }
}

// clear information for given bx but keeps record of the empty BX
template < class T >
void BXVector<T>::clearBX(int bx)
{
  int si = size(bx);	
  for(int i;i<size(bx);i++){
     erase(bx,i);
  }
  for(int k=0; k<itrs_.size();k++){
     if(k >indexFromBX(bx)){
        itrs_[k] = itrs_[k] - si;
     }
  }
}

// access data at a given location i in bunch crossing bx
template < class T >
const T& BXVector<T>::at( int bx, int i ) const
{
  return data_.at(itrs_[indexFromBX(bx)]+i);
}

// set data at a given location i in bunch crossing bx
template < class T >
void BXVector<T>::set( int bx, int i ,T object)
{
  if(i >= size(bx)){
     cout<<"ERROR: bx "<<bx<<" is only "<<size(bx)<<" long"<<endl;
  }
  else{
     data_.erase(data_.begin() + itrs_[indexFromBX(bx)]+i);
     data_.insert(data_.begin() + itrs_[indexFromBX(bx)] + i,object);
  }
}

// redefine bunch crossing starting from 0
template < class T >
unsigned BXVector<T>::indexFromBX(int bx) const
{
  return bx - bxFirst_;
}

// check to see if bx is empty
template <class T>
bool BXVector<T>::isEmpty(int bx) const
{
if (itrs_[indexFromBX(bx)]==itrs_.size()-1)
   {
     if ((data_.size()-1)==itrs_[indexFromBX(bx)])      
        {
	return true;
	}
   }

else
   {
     if (itrs_[indexFromBX(bx)]==itrs_[indexFromBX(bx+1)])
        {
         return true;
        }
   }
return false;
}
